//Program 1 
// Interface has 100% abstraction 
//object of interface can not be created
//compiler by default gives public and abstract specifier itself
//while overriding the method from interface we have to write public access specifier 


interface Demo{                                         // Interface is 100% abstraction no method has body
        void fun();                                     // method without body
        void gun();                                     // public abstract void gun() by default compiler adds itself before method in interface
}
class DemoChild implements Demo{
        public void fun(){                              // abstract method given body in Child class
                System.out.println("In fun");
        }
        public void gun(){                              // but while giving body to method from interface we have to write public compulsary as if we dont write compiler will consider it as default and it will show error of assigning weaker access specifier
                System.out.println("In gun");
        }
}
class Client {
        public static void main(String[] args){
                Demo obj = new DemoChild();             // object of interface can not be created so we have created object of Child class giving reference of Parent Class
                obj.fun();
                obj.gun();
        }
}


// it supports multi-level inheritance 
//Program 2

interface Demo{                                         // interface has 2 methods
        void fun();
        void gun();
}
abstract class DemoChild1 implements Demo{              //it has 2 abstract method coming from parent but 1 method is not given body in DemoChild class fun() so the class is abstract
        public void gun(){
                System.out.println("In gun");
        }
}
class DemoChild2 extends DemoChild1{                    //it has 1 abstract method coming from parent nut it has given body to it so it is now 100% non abstract

        public void fun(){
                System.out.println("In fun");
        }
}

class Client {
        public static void main(String [] a){
                Demo obj = new DemoChild2();
                obj.gun();
                obj.fun();
        }
}

//Program 3
// It supports multiple inheritance which is not supported by class 

interface Demo{
        void fun();
}
interface Demo2{
        void gun();
}
class Child implements Demo,Demo2{
        public void fun(){
                System.out.println("In fun");
        }
        public void gun(){
                System.out.println("in gun");
        }
}


//Program 1 Overriding basic

class Parent {
        Parent(){
                System.out.println("in Parent Constructor");
        }
        void Property(){
                System.out.println("Car, Flat, farm, Gold");
        }
        void Marry(){                                           // overridden method
                System.out.println("Dipika Padukone");
        }
}
class Child extends Parent {
        Child(){
                System.out.println("In Child Constructor");
        }
        void Marry(){                                           // this method will override method from parent
                System.out.println("Alia Bhatt");
        }
}
class Client{
        public static void main(String []a ){
                Child obj = new Child();
                obj.Property();
                obj.Marry();

        }
}
/*
in Parent Constructor
In Child Constructor
Car, Flat, farm, Gold
Alia Bhatt
*/

//Program 2 

class Parent{
        Parent(){
                System.out.println("In Parent Constructor");
        }
        void fun(){
                System.out.println("in fun Parent");
        }                                                       // Parent class has 2 methods 1. Parent constructor 2.fun                                         
}
class Child extends Parent{
        Child(){
                System.out.println("In Child Constructor");
        }
        void gun(){
                System.out.println("in gun Child");
        }                                                        // Child class has three methods 1.Child() Constructor 2.fun 3.gun 
}
class Client {
        public static void main(String [] ars){
                Parent obj = new Child();
                obj.gun();                                        // Symbol not found bcoz while compiling the compiler checks the reference side only so it will try to find gun method in Parent class since there is no gun method in parent class it will show error
        }                                                        
}

/*
Symbol not found
*/

 // if gun method would be present in Parent class the it would have print the gun method belonging to child as the obj created is of child class
//Program 3

class Parent{
        Parent(){
                System.out.println("In Parent Constructor");
        }
        void fun(){
                System.out.println("in fun Parent");
        }       
        void gun(){
                System.out.println("In Gun Parent");
        }
}

class Child extends Parent{
        Child(){
                System.out.println("In Child Constructor");
        }
        void gun(){
                System.out.println("in gun Child");
        }                                                       
}
class Client {
        public static void main(String [] ars){
                Parent obj = new Child();
                obj.gun();                                       
        }
}

/*
Output 
In Parent Constructor
In Child Constructor
in gun Child
*/

//Program 4
class Parent {
        void fun(){                                     //This method belongs to Parent class
                System.out.println("in fun Parent");
        }
}
class Child extends Parent{
        void fun(int x){                                //This method is only belonging to Child class this is not over riding method as the method signature of both the method is different
                System.out.println("In fun Child");
        }
}
class Client{
        public static void main(String [] a){
                Parent obj = new Child();
                obj.fun(10);                            //here we tried to call the method fun(int) which is not present in parent so it will show error
                obj.fun()                               //This will call the method form parent class as it will bind it while compiling to the same class
        }
}

//Program 5 and Program 6 
// Ambiquity

class Parent{
        void fun(int x,float y){
                System.out.println("in parent fun");
        }
        void fun(float x , int y){
                System.out.println("in 2nd fun");
        }
}
class Client{
        public static void main(String[] arg){
                Parent obj = new Parent();
                obj.fun(10,10.5f);
                obj.fun(10.5f,10);
                obj.fun(10,10);                         //reference to fun in ambiquious as both fun methods match , above to method works fine but ambiquity error is shown when the condition arrises if you dont call such method then there will not be error

        }
}
//Program 6

class Demo{
        void fun(String str){
                System.out.println("String");
        }
        void fun(StringBuffer sb){
                System.out.println("StringBuffer");
        }
        public static void main(String [] args){
                Demo obj = new Demo();
                obj.fun("String ahe ka ");                    //String   
                obj.fun(new StringBuffer("StringBuffer"));    // StringBuffer

                obj.fun(null);                                // ambiqueous 
        }
}


// Program 7
// Return Type scenario

class Parent {
        Parent(){
                System.out.println("In Parent constructor");
        }
        char fun(){
                System.out.println("In Fun Parent");
                return 'S';
        }
}
class Child extends Parent{
        int fun(){                                        //fun() in Child cannot override fun() in Parent , return type is not compatible with char
                System.out.println("in fun Child");
                return 10;
        }
}
class Client{
        public static void main(String [] a){
                Parent p = new Child();
                p.fun();
        }
}

//Program 8
//Access Specifier

class Parent{
        public void fun(){                              //Access Specifier == public
                System.out.println("In Fun Parent");
        }
}
class Child extends Parent{
        void fun(){                                     //Access Specifier == default ::: attempting to access weaker access specifier :: error
                System.out.println("In fun child");
        }
}
class Client{
        public static void main(String [] a){
                Parent p = new Child();
                p.fun();
        }
}


// Program 9 
// Private access specifier
class Parent{
        private void fun(){                             // private access specifier can not be accessed from out of the class
                System.out.println("In parent fun");
        }
}
class Child extends Parent{
        void fun(){
                System.out.println("In child fun");
        }
}
class Client {
        public static void main(String [] arg){
                Parent p = new Child();
                p.fun();
        }
}

//Program 10
// final 

class Parent {
        final void fun(){                                       //final method cannot be overriden
                System.out.println("In fun Parent final");
        }
}
class Child extends Parent{
        void fun(){
                System.out.println("In fun child");
        }
}

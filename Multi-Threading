// Multi-threading 
// here are two threads 
// both treads work simultaneously according to there priority given by the JVM 


class MyThread extends Thread{
        public void run(){                              // this method run() is overridden method from the Thread Class
                for(int i = 0;i<10;i++){
                        System.out.println("In run");
                }
        }
}
class ThreadDemo{
        public static void main(String [] args){
                MyThread obj = new MyThread();          // here we have created the obj of the class MyThread which will call the super in it which leads to the constructor of Thread class and in the Thread class there is a VMCreate method which will create a new thread 
                obj.start();                            //This start method will start the newly created Thread which is created by the above object ------ and when we start without calling the method the thread will start running

                for(int i = 0;i<10;i++){
                        System.out.println("In main");
                }
        }
}

// Code 2

class Mythread extends Thread{
        public void run(){
                for(int i = 0; i <10;i++){
                        System.out.println("In run");
                        try{                                                             // here we have only one option to handle the interrupted Exception because in overriding the method overrided should throw the same exception then only the overridden method can throw the same exception here the method run in Thread class do not throw any exception so we have only try catch as option to handle the exception
                                Thread.sleep(1000);
                        }catch(InterruptedException ie){

                        }
                }
        }
}
class ThreadDemo{
        public static void main(String [] args)throws InterruptedException{
                Mythread obj = new Mythread();
                obj.start();

                for(int i = 0;i<10;i++){
                        System.out.println("In main ");
                        Thread.sleep(1000);
                }
        }
}

=============================================
//do not do this code
//wrong practice 

class MyThread extends Thread {
        public void run(){
                System.out.println("In run");
                System.out.println(Thread.currentThread().getName());

        }
        public void start(){                                                    //bcoz of the below reason we dont have to write start method in out class where we definetly have to override the run method otherwise out class will be abstrat class
                System.out.println("In myThreadStart");
        }
}
class Demo{
        public static void main(String []a ){
                MyThread obj = new MyThread();
                obj.start();                                                    // As we have seen when we call the start method the new thred start but here no new tread start becouse it is calling the start method of MyThread class created by us which will not start the tread thats why the call is not made to the run() method in out mythread class

                System.out.println(Thread.currentThread().getName());
        }
}

Output :
In MYthreadStart
main


================================================
//Creating Multi Thread 
// here we have created 3 threads

class Demo extends Thread{
        public void run(){
                System.out.println("Demo :" + Thread.currentThread().getName());
        }
}
class Mythread extends Thread{
        public void run(){
                System.out.println("Mythread :" + Thread.currentThread().getName());

                Demo obj = new Demo();
                obj.start();
        }
}
class ThreadDemo{
        public static void main(String[] args){

                System.out.println("ThreadDemo :" + Thread.currentThread().getName());

                Mythread obj = new Mythread();
                obj.start();
        }
}

Output :
ThreadDemo :main
Mythread :Thread-0
Demo :Thread-1

================================================ 2nd Way to create a new Thread

// Creating a new Thread without extending the thread Class
// This method can be used when the client wants to make thread in the child class
// by using Runnable Interface We can create new thread in the child class
// Thread class is in lang package so no need to import any package
// Thread has many constructor one of which is Thread(Runnable r)  So we can give parameter of any class which is child of Runnable interface
// here same out MyThread class is the child of runnable Interface so it can be given to thread constructor as parameter

class MyThread implements Runnable{
        public void run(){
                System.out.println("In run");
                System.out.println(Thread.currentThread().getName());
        }
}
class Demo{
        public static void main(String [] args){

                MyThread obj = new MyThread();
                Thread t = new Thread(obj);                             //
                t.start();

                System.out.println(Thread.currentThread().getName());
        }
}

OutPut :

main
In run
Thread-0

======================================== Priority  in Thread

class MyThread extends Thread{
        public void run(){
                Thread t = Thread.currentThread();
                System.out.println(t.getPriority());
        }
}
class Demo{
        public static void main(String [] args){
                Thread t = Thread.currentThread();
                System.out.println(t.getPriority());

                MyThread obj = new MyThread();
                obj.start();

                t.setPriority(7);

                MyThread obj1 = new MyThread();
                obj1.start();
        }
}

Output :

5
5
7


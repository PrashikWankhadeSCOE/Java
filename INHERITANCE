// Basic Inheritance 

class ICC{                                                          //Parent Class 
        ICC(){                                                      // Parent Constructor                                                                          
                System.out.println(" In ICC Constructor");
        }
}
class BCCI extends ICC{                                             // BCCI is Child of ICC (extends represents the child-parent relationship)   
        BCCI(){                                                     // Child Constructor (inside constructor of each class there is a invokespecial line which represents calling the parent class constructor which results in the output printing the data in parent constructor 1st)
                System.out.println( "In BCCI Constructor");
        }
}
class Client{
        public static void main(String [] a){
                BCCI JayShah = new BCCI();                         // Creating the objecct of child class , Creating will directly call the class constructor
        }
}

/*Output :

In ICC Constructor
In BCCI Constructor
*/

// Program 2

class Parent {
        Parent(){
                System.out.println("In Parent Constructor");
        }
        void ParentProperty(){
                System.out.println("Flat,Car,Gold");
        }
}

class Child extends Parent{
        Child(){
                System.out.println("In Child Constructor");
        }
        void Marry(){
                System.out.println("Deepika Padukone");
        }
}

class Client {
        public static void main(String [] a){
                Child obj = new Child();
                obj.ParentProperty();
                obj.Marry();

                Parent obj1 = new Child();
                //obj1.Marry();                                 // Error bcoz while compiling it will bind Marry method to Parent but in parent class there is no Marry method so there is error
        }
}

/*
Output 
In Parent Constructor
In Child Constructor
Flat,Car,Gold
Deepika Padukone
In Parent Constructor
In Child Constructor
*/

//Program 3
// Static in inheritance

class Parent{
        static {
                System.out.println("in parent Static ");
        }
        Parent(){
                System.out.println("in Parent constructor");
        }
}
class Child extends Parent {
        Child(){
                System.out.println("in child Constructor");
        }

        static {                                                //Static comes 1st in the class before execution of anything ,Static runs directly on stackframe withoud making obj and anything

                System.out.println("In Child Static");
        }
}
class Client {
        public static void main(String [] a){
                Child obj = new Child();
        }
}

/*
Output :
in parent Static
In Child Static
in Parent constructor
in child Constructor
*/

//Program 4
//Static variable and methods 

class Parent{
        int x = 10;
        static int y = 20;

        static{
                System.out.println("In Parent Static");
        }
        Parent(){
                System.out.println("In Parent Constructor");
        }
        void methodOne(){
                System.out.println("y="+y);                     //not static has access to static aswellas non static
                System.out.println("x="+x);
        }
        static void methodTwo(){                                // static has access to static only non static variables can not be accessed from static context
                System.out.println("y="+y);
        }
}
class Child extends Parent{
        Child(){
                System.out.println("In Child Constructor");
        }
        static {
                System.out.println(" In Child static");
        }
}
class Client {
        public static void main(String [] args){
                Child obj = new Child();
                obj.methodOne();
                obj.methodTwo();
        }
}

/*
Output :
In Parent Static
In Child static
In Parent Constructor
In Child Constructor
y=20
x=10
y=20
*/
